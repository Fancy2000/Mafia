// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationClient is the client API for Communication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationClient interface {
	InitPlayer(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseInit, error)
	StartGame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error)
	EndDay(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error)
	CheckHowManyPeopleIsNotSleep(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error)
	CheckHowManyPeopleIsSleep(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error)
	ListOfPlayers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResponseListOfPlayers, error)
	CountAlivePeople(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error)
	EndNight(ctx context.Context, in *HowMany, opts ...grpc.CallOption) (*HowMany, error)
	CommissionerCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error)
	MafiaKill(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error)
	CheckDeadAfterNight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error)
	Vote(ctx context.Context, in *Votion, opts ...grpc.CallOption) (*Request, error)
	CountVote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error)
	SayHwoIsMafia(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error)
	KillAfterVote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error)
	EndGame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error)
	CheckWhoMafia(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error)
	DeadVote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type communicationClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationClient(cc grpc.ClientConnInterface) CommunicationClient {
	return &communicationClient{cc}
}

func (c *communicationClient) InitPlayer(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseInit, error) {
	out := new(ResponseInit)
	err := c.cc.Invoke(ctx, "/Communication/InitPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) StartGame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) EndDay(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/EndDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CheckHowManyPeopleIsNotSleep(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/CheckHowManyPeopleIsNotSleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CheckHowManyPeopleIsSleep(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/CheckHowManyPeopleIsSleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) ListOfPlayers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResponseListOfPlayers, error) {
	out := new(ResponseListOfPlayers)
	err := c.cc.Invoke(ctx, "/Communication/ListOfPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CountAlivePeople(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/CountAlivePeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) EndNight(ctx context.Context, in *HowMany, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/EndNight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CommissionerCheck(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/CommissionerCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) MafiaKill(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/MafiaKill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CheckDeadAfterNight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/CheckDeadAfterNight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) Vote(ctx context.Context, in *Votion, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CountVote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HowMany, error) {
	out := new(HowMany)
	err := c.cc.Invoke(ctx, "/Communication/CountVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) SayHwoIsMafia(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Communication/SayHwoIsMafia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) KillAfterVote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/KillAfterVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) EndGame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/EndGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) CheckWhoMafia(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Communication/CheckWhoMafia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationClient) DeadVote(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Communication/DeadVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationServer is the server API for Communication service.
// All implementations must embed UnimplementedCommunicationServer
// for forward compatibility
type CommunicationServer interface {
	InitPlayer(context.Context, *Request) (*ResponseInit, error)
	StartGame(context.Context, *Empty) (*HowMany, error)
	EndDay(context.Context, *Empty) (*HowMany, error)
	CheckHowManyPeopleIsNotSleep(context.Context, *Empty) (*HowMany, error)
	CheckHowManyPeopleIsSleep(context.Context, *Empty) (*HowMany, error)
	ListOfPlayers(context.Context, *Empty) (*ResponseListOfPlayers, error)
	CountAlivePeople(context.Context, *Empty) (*HowMany, error)
	EndNight(context.Context, *HowMany) (*HowMany, error)
	CommissionerCheck(context.Context, *Request) (*Request, error)
	MafiaKill(context.Context, *Request) (*Request, error)
	CheckDeadAfterNight(context.Context, *Empty) (*Request, error)
	Vote(context.Context, *Votion) (*Request, error)
	CountVote(context.Context, *Empty) (*HowMany, error)
	SayHwoIsMafia(context.Context, *Empty) (*Empty, error)
	Update(context.Context, *Request) (*Request, error)
	KillAfterVote(context.Context, *Empty) (*Request, error)
	EndGame(context.Context, *Empty) (*Request, error)
	CheckWhoMafia(context.Context, *Empty) (*Request, error)
	DeadVote(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedCommunicationServer()
}

// UnimplementedCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationServer struct {
}

func (UnimplementedCommunicationServer) InitPlayer(context.Context, *Request) (*ResponseInit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPlayer not implemented")
}
func (UnimplementedCommunicationServer) StartGame(context.Context, *Empty) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedCommunicationServer) EndDay(context.Context, *Empty) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndDay not implemented")
}
func (UnimplementedCommunicationServer) CheckHowManyPeopleIsNotSleep(context.Context, *Empty) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHowManyPeopleIsNotSleep not implemented")
}
func (UnimplementedCommunicationServer) CheckHowManyPeopleIsSleep(context.Context, *Empty) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHowManyPeopleIsSleep not implemented")
}
func (UnimplementedCommunicationServer) ListOfPlayers(context.Context, *Empty) (*ResponseListOfPlayers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfPlayers not implemented")
}
func (UnimplementedCommunicationServer) CountAlivePeople(context.Context, *Empty) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAlivePeople not implemented")
}
func (UnimplementedCommunicationServer) EndNight(context.Context, *HowMany) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndNight not implemented")
}
func (UnimplementedCommunicationServer) CommissionerCheck(context.Context, *Request) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommissionerCheck not implemented")
}
func (UnimplementedCommunicationServer) MafiaKill(context.Context, *Request) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MafiaKill not implemented")
}
func (UnimplementedCommunicationServer) CheckDeadAfterNight(context.Context, *Empty) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeadAfterNight not implemented")
}
func (UnimplementedCommunicationServer) Vote(context.Context, *Votion) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedCommunicationServer) CountVote(context.Context, *Empty) (*HowMany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountVote not implemented")
}
func (UnimplementedCommunicationServer) SayHwoIsMafia(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHwoIsMafia not implemented")
}
func (UnimplementedCommunicationServer) Update(context.Context, *Request) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCommunicationServer) KillAfterVote(context.Context, *Empty) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAfterVote not implemented")
}
func (UnimplementedCommunicationServer) EndGame(context.Context, *Empty) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}
func (UnimplementedCommunicationServer) CheckWhoMafia(context.Context, *Empty) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWhoMafia not implemented")
}
func (UnimplementedCommunicationServer) DeadVote(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeadVote not implemented")
}
func (UnimplementedCommunicationServer) mustEmbedUnimplementedCommunicationServer() {}

// UnsafeCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationServer will
// result in compilation errors.
type UnsafeCommunicationServer interface {
	mustEmbedUnimplementedCommunicationServer()
}

func RegisterCommunicationServer(s grpc.ServiceRegistrar, srv CommunicationServer) {
	s.RegisterService(&Communication_ServiceDesc, srv)
}

func _Communication_InitPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).InitPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/InitPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).InitPlayer(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).StartGame(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_EndDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).EndDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/EndDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).EndDay(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CheckHowManyPeopleIsNotSleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CheckHowManyPeopleIsNotSleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CheckHowManyPeopleIsNotSleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CheckHowManyPeopleIsNotSleep(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CheckHowManyPeopleIsSleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CheckHowManyPeopleIsSleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CheckHowManyPeopleIsSleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CheckHowManyPeopleIsSleep(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_ListOfPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).ListOfPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/ListOfPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).ListOfPlayers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CountAlivePeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CountAlivePeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CountAlivePeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CountAlivePeople(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_EndNight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HowMany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).EndNight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/EndNight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).EndNight(ctx, req.(*HowMany))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CommissionerCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CommissionerCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CommissionerCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CommissionerCheck(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_MafiaKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).MafiaKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/MafiaKill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).MafiaKill(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CheckDeadAfterNight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CheckDeadAfterNight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CheckDeadAfterNight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CheckDeadAfterNight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Votion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).Vote(ctx, req.(*Votion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CountVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CountVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CountVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CountVote(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_SayHwoIsMafia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).SayHwoIsMafia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/SayHwoIsMafia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).SayHwoIsMafia(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).Update(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_KillAfterVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).KillAfterVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/KillAfterVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).KillAfterVote(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).EndGame(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_CheckWhoMafia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).CheckWhoMafia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/CheckWhoMafia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).CheckWhoMafia(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Communication_DeadVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServer).DeadVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Communication/DeadVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServer).DeadVote(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Communication_ServiceDesc is the grpc.ServiceDesc for Communication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Communication",
	HandlerType: (*CommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitPlayer",
			Handler:    _Communication_InitPlayer_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _Communication_StartGame_Handler,
		},
		{
			MethodName: "EndDay",
			Handler:    _Communication_EndDay_Handler,
		},
		{
			MethodName: "CheckHowManyPeopleIsNotSleep",
			Handler:    _Communication_CheckHowManyPeopleIsNotSleep_Handler,
		},
		{
			MethodName: "CheckHowManyPeopleIsSleep",
			Handler:    _Communication_CheckHowManyPeopleIsSleep_Handler,
		},
		{
			MethodName: "ListOfPlayers",
			Handler:    _Communication_ListOfPlayers_Handler,
		},
		{
			MethodName: "CountAlivePeople",
			Handler:    _Communication_CountAlivePeople_Handler,
		},
		{
			MethodName: "EndNight",
			Handler:    _Communication_EndNight_Handler,
		},
		{
			MethodName: "CommissionerCheck",
			Handler:    _Communication_CommissionerCheck_Handler,
		},
		{
			MethodName: "MafiaKill",
			Handler:    _Communication_MafiaKill_Handler,
		},
		{
			MethodName: "CheckDeadAfterNight",
			Handler:    _Communication_CheckDeadAfterNight_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Communication_Vote_Handler,
		},
		{
			MethodName: "CountVote",
			Handler:    _Communication_CountVote_Handler,
		},
		{
			MethodName: "SayHwoIsMafia",
			Handler:    _Communication_SayHwoIsMafia_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Communication_Update_Handler,
		},
		{
			MethodName: "KillAfterVote",
			Handler:    _Communication_KillAfterVote_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _Communication_EndGame_Handler,
		},
		{
			MethodName: "CheckWhoMafia",
			Handler:    _Communication_CheckWhoMafia_Handler,
		},
		{
			MethodName: "DeadVote",
			Handler:    _Communication_DeadVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
